{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "############### Libraries\n",
    "%pylab inline\n",
    "import dataiku\n",
    "from dataiku import pandasutils as pdu\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "pd.set_option('mode.chained_assignment', None)\n",
    "#https://www.dataquest.io/blog/settingwithcopywarning/\n",
    "\n",
    "import datetime\n",
    "from datetime import timedelta\n",
    "import datetime\n",
    "import seaborn as sns\n",
    "import re as re\n",
    "import math\n",
    "import pickle\n",
    "import time\n",
    "import sys\n",
    "import datetime\n",
    "#print(sys.version)\n",
    "import scikitplot as skplt\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "from math import log\n",
    "from datetime import datetime, timedelta\n",
    "from numpy import sort\n",
    "\n",
    "import scipy.stats as st\n",
    "import scipy.special as spec\n",
    "\n",
    "from sklearn.preprocessing import Imputer\n",
    "from sklearn.model_selection import train_test_split, StratifiedShuffleSplit,StratifiedKFold, RandomizedSearchCV, GridSearchCV\n",
    "from sklearn.metrics import accuracy_score, log_loss, roc_auc_score, precision_score, recall_score,confusion_matrix, roc_curve, classification_report\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC, LinearSVC, NuSVC\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, RandomForestRegressor\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "\n",
    "#import scikitplot as skplt\n",
    "\n",
    "from xgboost import XGBClassifier, plot_importance\n",
    "\n",
    "import lightgbm as lgb\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [],
   "source": [
    "############### My Functions\n",
    "def add_date(month_date, num):\n",
    "    \n",
    "    month = month_date%100\n",
    "    year = int(month_date/100)\n",
    "    \n",
    "    if month + num > 0 and month + num <=12:\n",
    "        new_month = month + num\n",
    "        new_year = year\n",
    "    elif month + num <= 0:\n",
    "        new_month = month + num + 12\n",
    "        new_year = year -1 \n",
    "    elif month + num > 12:\n",
    "        new_month = month + num - 12\n",
    "        new_year = year + 1\n",
    "    \n",
    "    return new_year*100+new_month\n",
    "\n",
    "def commas(num):\n",
    "    return '{0:,d}'.format(num)\n",
    "\n",
    "def bold(x):\n",
    "    return '\\033[1m' + x + '\\033[0m'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataiku execusion:  1 minutes\n",
      "Dataiku execusion:  0 minutes\n"
     ]
    }
   ],
   "source": [
    "#### vc_mdl_pwd_reset - all customers that reset their password\n",
    "#### vc_mdl_pwd_forced - force migration customers\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "all_df = dataiku.Dataset(\"vc_mdl_pwd_reset\")\n",
    "all_df = all_df.get_dataframe()\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "print(\"Dataiku execusion: \", int((end - start)/60), \"minutes\")\n",
    "\n",
    "####################################################################\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "forced_df = dataiku.Dataset(\"vc_mdl_pwd_forced\")\n",
    "forced_df = forced_df.get_dataframe()\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "print(\"Dataiku execusion: \", int((end - start)/60), \"minutes\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 886,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Possible responses:'call_ind', 'non_call_ind', 'non_call_one_week',\n",
    "#                       'non_call_two_weeks', 'non_call_month'\n",
    "\n",
    "response = 'non_call_ind'\n",
    "data = forced_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 887,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### only for all\n",
    "# data = data.loc[data['ocif_id'] != 23167001705700,]\n",
    "# data = data.drop('dep_date',1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 893,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 815,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size is reduced from 370,362\n",
      "To 343,856\n"
     ]
    }
   ],
   "source": [
    "print('Size is reduced from', commas(data.shape[0]))\n",
    "data = data.loc[data['acct_cnt'].isnull() == False,]\n",
    "print('To', commas(data.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 816,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have 306,327 unique customers, so we have to change the data to make it on customer level\n"
     ]
    }
   ],
   "source": [
    "print('We have', commas(data['ocif_id'].nunique()), 'unique customers, so we have to change the data to make it on customer level')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 817,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 818,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables_all = list(data)\n",
    "variables_ids = ['cad_accs_id', 'accs_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 819,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables_to_drop = variables_ids + ['AGE']\n",
    "\n",
    "for variable in variables_to_drop:\n",
    "    data = data.drop(variable,1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 820,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables_dates = data.select_dtypes(include = ['datetime64[ns]']).columns.tolist()\n",
    "variables_indicators = [i for i in variables_all if any([x in i for x in ['IND','ind']]) ]\n",
    "variables_counts = [i for i in variables_all if any([x in i for x in ['CNT','cnt','count']])]\n",
    "variables_balances = [i for i in variables_all if 'BAL' in i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 821,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'AGE',\n",
       " 'CUST_SEGMENT_ID',\n",
       " 'TENURE_ID',\n",
       " 'accs_id',\n",
       " 'age_pers',\n",
       " 'cad_accs_id',\n",
       " 'days_before_call',\n",
       " 'gender_cd',\n",
       " 'mbl_logins',\n",
       " 'mbl_prc',\n",
       " 'mrtl_st_cd',\n",
       " 'num_calls',\n",
       " 'ocif_id',\n",
       " 'olb_logins',\n",
       " 'olb_prc',\n",
       " 'primary_platform',\n",
       " 'segm_fin',\n",
       " 'tnr_mth_nbr',\n",
       " 'total_logins'}"
      ]
     },
     "execution_count": 821,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(variables_all) - set(variables_dates) - set(variables_indicators) - set (variables_counts) - set(variables_balances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 822,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_1 = data.groupby(['ocif_id'])[variables_dates + variables_indicators].max()\n",
    "data_2 = data.groupby(['ocif_id'])[variables_counts + variables_balances ].sum()\n",
    "data_3 = data.groupby(['ocif_id'])['AGE','age_pers','mbl_prc','olb_prc'].mean()\n",
    "data_4 = data.groupby(['ocif_id'])['CUST_SEGMENT_ID', 'TENURE_ID', 'days_before_call',  'gender_cd', \n",
    "                                   'num_calls', 'mrtl_st_cd', 'primary_platform', 'segm_fin', 'tnr_mth_nbr'].max()\n",
    "data_5 = data.groupby(['ocif_id'])[ 'mbl_logins', 'olb_logins', 'total_logins'].sum()\n",
    "\n",
    "data_1 = data_1.reset_index()\n",
    "data_2 = data_2.reset_index()\n",
    "data_3 = data_3.reset_index()\n",
    "data_4 = data_4.reset_index()\n",
    "data_5 = data_5.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 823,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_merged = data_1.merge(data_2, on = 'ocif_id').merge(data_3, on = 'ocif_id').merge(data_4, on = 'ocif_id').merge(data_5, on = 'ocif_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 894,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data_merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 825,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Check\n",
      "Number of rows is 306327 and number of unique customers is 306327\n"
     ]
    }
   ],
   "source": [
    "print('Check')\n",
    "print('Number of rows is', data_merged.shape[0], 'and number of unique customers is', data_merged['ocif_id'].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 826,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data_merged.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 895,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 828,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables_dates.remove('hist_data_dt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 829,
   "metadata": {},
   "outputs": [],
   "source": [
    "################################ DATE VARIABLES ################################\n",
    "\n",
    "for variable in variables_dates:\n",
    "    new_variable = 'since_' + variable\n",
    "    data[new_variable] = (data['hist_data_dt'] - data[variable]).astype('timedelta64[D]') + 1\n",
    "    data = data.drop(variable,1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 896,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 831,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables_to_drop =  ['since_event_date', 'since_mdl_run_dt', 'since_min_call_date', 'hist_data_dt', 'num_calls']\n",
    "\n",
    "for variable in variables_to_drop:\n",
    "    data = data.drop(variable,1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 832,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.loc[data['call_ind'] == 1,'non_call_ind'] = 0\n",
    "data.loc[data['call_ind'] == 0,'non_call_ind'] = 1\n",
    "\n",
    "data.loc[data['days_before_call'].isnull() == True,'non_call_one_week'] = 1\n",
    "data.loc[data['days_before_call'] > 7,'non_call_one_week'] = 1\n",
    "data.loc[data['days_before_call'] <= 7,'non_call_one_week'] = 0\n",
    "\n",
    "data.loc[data['days_before_call'].isnull() == True,'non_call_two_weeks'] = 1\n",
    "data.loc[data['days_before_call'] > 14,'non_call_two_weeks'] = 1\n",
    "data.loc[data['days_before_call'] <= 14,'non_call_two_weeks'] = 0\n",
    "\n",
    "data.loc[data['days_before_call'].isnull() == True,'non_call_month'] = 1\n",
    "data.loc[data['days_before_call'] > 31,'non_call_month'] = 1\n",
    "data.loc[data['days_before_call'] <= 31,'non_call_month'] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 833,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------\n",
      "\u001b[1mNever Called\u001b[0m \n",
      "\n",
      "non_call_ind\n",
      "0.0     52805\n",
      "1.0    253522\n",
      "Name: ocif_id, dtype: int64 \n",
      "----------------------------\n",
      "\u001b[1mDid not call in One Week\u001b[0m \n",
      "\n",
      "non_call_one_week\n",
      "0.0      7945\n",
      "1.0    298382\n",
      "Name: ocif_id, dtype: int64 \n",
      "----------------------------\n",
      "\u001b[1mDid not call in Two Weeks\u001b[0m \n",
      "\n",
      "non_call_two_weeks\n",
      "0.0     12355\n",
      "1.0    293972\n",
      "Name: ocif_id, dtype: int64 \n",
      "----------------------------\n",
      "\u001b[1mDid not call in One Month\u001b[0m \n",
      "\n",
      "non_call_month\n",
      "0.0     21841\n",
      "1.0    284486\n",
      "Name: ocif_id, dtype: int64\n",
      "----------------------------\n"
     ]
    }
   ],
   "source": [
    "print('----------------------------')\n",
    "print(bold('Never Called'),'\\n')\n",
    "print(data.groupby(['non_call_ind']).count()['ocif_id'],'\\n----------------------------')\n",
    "print(bold('Did not call in One Week'),'\\n')\n",
    "print(data.groupby(['non_call_one_week']).count()['ocif_id'],'\\n----------------------------')\n",
    "print(bold('Did not call in Two Weeks'),'\\n')\n",
    "print(data.groupby(['non_call_two_weeks']).count()['ocif_id'],'\\n----------------------------')\n",
    "print(bold('Did not call in One Month'),'\\n')\n",
    "print(data.groupby(['non_call_month']).count()['ocif_id'])\n",
    "print('----------------------------')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 834,
   "metadata": {},
   "outputs": [],
   "source": [
    "response_variables = ['call_ind', 'non_call_ind', 'non_call_one_week', 'non_call_two_weeks', 'non_call_month','days_before_call']\n",
    "\n",
    "response_variables.remove(response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 835,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['call_ind',\n",
       " 'non_call_one_week',\n",
       " 'non_call_two_weeks',\n",
       " 'non_call_month',\n",
       " 'days_before_call']"
      ]
     },
     "execution_count": 835,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "response_variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 836,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables_to_drop = response_variables \n",
    "\n",
    "for variable in variables_to_drop:\n",
    "    data = data.drop(variable,1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 897,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 838,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['since_MAX_OLB_MBL_CUST_DT',\n",
       " 'since_last_olb_login_dt',\n",
       " 'since_last_mbl_login_dt']"
      ]
     },
     "execution_count": 838,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dates with NAs!\n",
    "['since_LAST_PAC_DT', 'since_LAST_PAD_DT']\n",
    "['since_MAX_OLB_MBL_CUST_DT', 'since_last_olb_login_dt', 'since_last_mbl_login_dt']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 884,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "variable = 'age_pers'# 1000 'since_last_olb_login_dt':90 # 'since_last_mbl_login_dt':90 #since_MAX_OLB_MBL_CUST_DT:1000\n",
    "\n",
    "target = data.loc[ (data[response] == 1) & (data[variable].isnull() == False ),variable]\n",
    "nontarget=  data.loc[ (data[response] == 0) & (data[variable].isnull() == False),variable]\n",
    "\n",
    "kwargs = dict(histtype='stepfilled', alpha=0.3, normed=True, bins=10)\n",
    "plt.hist(target, label = 'Target', **kwargs)\n",
    "plt.hist(nontarget, label = 'Non Target', **kwargs)\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 840,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fix NA for max(sort of) value\n",
    "\n",
    "variables_90 = ['since_last_olb_login_dt','since_last_mbl_login_dt']\n",
    "variables_1000 = ['since_MAX_OLB_MBL_CUST_DT', 'since_LAST_PAC_DT', 'since_LAST_PAD_DT']\n",
    "\n",
    "for variable in variables_90:\n",
    "    data.loc[(data[variable] > 90) | \n",
    "             (data[variable].isnull() == True ),variable] = 90\n",
    "    \n",
    "for variable in variables_1000:\n",
    "    data.loc[(data[variable] > 1000) | \n",
    "             (data[variable].isnull() == True ),variable] = 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 898,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SAV_TOT_BAL     0.000653\n",
       "CCR_TOT_BAL     0.000653\n",
       "CHQ_TOT_BAL     0.000653\n",
       "TERM_TOT_BAL    0.000653\n",
       "HF_TOT_BAL      0.000653\n",
       "TOT_BAL         0.004244\n",
       "AGE             0.444623\n",
       "age_pers        0.444623\n",
       "mbl_prc         1.153016\n",
       "olb_prc         1.153016\n",
       "gender_cd       2.940975\n",
       "mrtl_st_cd      0.160286\n",
       "segm_fin        0.106422\n",
       "dtype: float64"
      ]
     },
     "execution_count": 842,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_prc = data.isnull().sum()/data.isnull().count()*100\n",
    "null_prc[null_prc>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 843,
   "metadata": {},
   "outputs": [],
   "source": [
    "nullify = ['BAL', 'prc']\n",
    "variables_nullify =  [x for x in list(data) for xs in nullify if xs in x]\n",
    "\n",
    "for variable in variables_nullify:\n",
    "    data[variable].fillna(0, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 844,
   "metadata": {},
   "outputs": [],
   "source": [
    "## ONLY FOR ALL CUSTOMERS \n",
    "# variables_to_drop = ['AGE','segm_fin'] \n",
    "# for variable in variables_to_drop:\n",
    "#     data = data.drop(variable,1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 845,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: float64)"
      ]
     },
     "execution_count": 845,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dropna(axis= 0,inplace = True)\n",
    "null_prc = data.isnull().sum()/data.isnull().count()*100\n",
    "null_prc[null_prc>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 846,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.set_index('ocif_id', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 899,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 861,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = data.loc[:,response]\n",
    "X = data.drop (response, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 862,
   "metadata": {},
   "outputs": [],
   "source": [
    "random = 2019\n",
    "test_prc = 0.3\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = test_prc, random_state = random)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 863,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_train = X_train\n",
    "data_train[response] = y_train\n",
    "\n",
    "data_test = X_test\n",
    "data_test[response] = y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 864,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dummies(data, to_print):\n",
    "    \n",
    "    categorical_variables = data.select_dtypes(include = ['category', 'object']).columns.tolist()\n",
    "    dummy_variables = pd.get_dummies(data.loc[:,categorical_variables], drop_first = True)\n",
    "\n",
    "    data = pd.merge(data, dummy_variables, left_index = True, right_index = True)\n",
    "    data_out = data.drop(categorical_variables, axis = 1)\n",
    "    \n",
    "    if to_print == 1:\n",
    "    \n",
    "        print (\"List of all categorical variables: \", \"\\n\")\n",
    "        print (*categorical_variables, sep = \"\\n\")\n",
    "        print (\" \")\n",
    "\n",
    "        print (\"After creating dummy variables, the list looks like this: \", \"\\n\")\n",
    "        print ( *data_out.columns.tolist(), sep = \"\\n\")\n",
    "        print (\" \")\n",
    "        \n",
    "    return data_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 865,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_train = create_dummies(data_train,0)\n",
    "data_test = create_dummies(data_test,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 866,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1mCHECK\n",
      "\u001b[0m\n",
      "In training data, but not in testing: []\n",
      "In testing data, but not in training: [] \n",
      "\n",
      "Variables in training: 69  Records in training: 206,805\n",
      "Variables in testing:  69  Records in testing:  88,632\n"
     ]
    }
   ],
   "source": [
    "print('\\033[1m' + 'CHECK\\n' + '\\033[0m')\n",
    "print('In training data, but not in testing:',list(set(data_train) - set(data_test)))\n",
    "print('In testing data, but not in training:',list(set(data_test) - set(data_train)), '\\n')\n",
    "print('Variables in training:',data_train.shape[1], ' Records in training:','{0:,d}'.format(data_train.shape[0]))\n",
    "print('Variables in testing: ',data_test.shape[1], ' Records in testing: ', '{0:,d}'.format(data_test.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 867,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_variables = list (data_train)\n",
    "all_variables.remove(response)\n",
    "\n",
    "supes_important = ['', '', '']\n",
    "one_var = ['']\n",
    "#important_from_model = pd.Series(best_classifier.feature_importances_, index=X_test.columns).nlargest(15).reset_index()['index'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 868,
   "metadata": {},
   "outputs": [],
   "source": [
    "#you can use all_variables, important_variables, or supes_important \n",
    "\n",
    "variables_to_include = all_variables\n",
    "\n",
    "y_train = data_train.loc[:, response]\n",
    "X_train = data_train.loc[:, variables_to_include]\n",
    "\n",
    "y_test = data_test.loc[:, response]\n",
    "X_test = data_test.loc[:, variables_to_include]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 869,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ############### XGB Parameter Tunning ################\n",
    "\n",
    "# #https://www.analyticsvidhya.com/blog/2016/02/complete-guide-parameter-tuning-gradient-boosting-gbm-python/\n",
    "# # consider using GridSearchCV\n",
    "\n",
    "# xgb = XGBClassifier()\n",
    "\n",
    "# row_num = X_train.shape[0]\n",
    "\n",
    "# learning_rate_start = 0.05\n",
    "# learning_rate_end = 0.2\n",
    "\n",
    "# n_estimators_start = 3\n",
    "# n_estimators_end =  30\n",
    "\n",
    "# max_depth_start = 3\n",
    "# max_depth_end = 40\n",
    "\n",
    "# one_to_left = st.beta(10, 1)  \n",
    "# from_zero_positive = st.expon(0, 50)\n",
    "\n",
    "\n",
    "# random_grid = {  \n",
    "#     \"n_estimators\": st.randint(n_estimators_start, n_estimators_end),\n",
    "#     \"max_depth\": st.randint(max_depth_start, max_depth_end),\n",
    "#     \"learning_rate\": st.uniform(learning_rate_start, learning_rate_end)\n",
    "# #    \"colsample_bytree\": one_to_left,\n",
    "# #    \"subsample\": one_to_left,\n",
    "# #    \"gamma\": st.uniform(0, 10),\n",
    "# #    'reg_alpha': from_zero_positive,\n",
    "# #    \"min_child_weight\": from_zero_positive,\n",
    "# }\n",
    "\n",
    "# # random_grid = {  \n",
    "# #     \"n_estimators\": st.randint(n_estimators_start, n_estimators_end),\n",
    "# #     \"max_depth\": st.randint(max_depth_start, max_depth_end),\n",
    "# #     \"learning_rate\": st.uniform(learning_rate_start, learning_rate_end),\n",
    "# #     \"colsample_bytree\": one_to_left,\n",
    "# #     \"subsample\": one_to_left,\n",
    "# #     \"gamma\": st.uniform(0, 10),\n",
    "# #     'reg_alpha': from_zero_positive,\n",
    "# #     \"min_child_weight\": from_zero_positive\n",
    "# # }\n",
    "\n",
    "# # Random search of parameters, using 3 fold cross validation, \n",
    "# # search across 100 different combinations, and use all available cores\n",
    "# xgb_random = RandomizedSearchCV(estimator = xgb, \n",
    "#                                            param_distributions = random_grid, \n",
    "#                                            n_iter = 20, cv = 10, scoring = 'roc_auc', verbose=True, \n",
    "#                                            random_state=100)\n",
    "\n",
    "\n",
    "# start = time.time()\n",
    "# xgb_random.fit(X_train,y_train)\n",
    "# end = time.time()\n",
    "\n",
    "# print(\"Execution Time Was: \", (end - start)/60, \"minutes\")\n",
    "\n",
    "# XGBClassifierTuned = XGBClassifier()\n",
    "# XGBClassifierTuned.set_params(**xgb_random.best_params_)\n",
    "# XGBClassifierTuned.get_params()\n",
    "# #####################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 870,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It started at: 2019-09-09 16:42:24.313275\n",
      "Execution Time Was:  33 seconds\n"
     ]
    }
   ],
   "source": [
    "best_classifier =  XGBClassifier() \n",
    "#RandomForestClassifier() # GradientBoostingClassifier() DecisionTreeClassifier() XGBClassifier() #LogisticRegression()\n",
    "\n",
    "import datetime\n",
    "start = time.time()\n",
    "\n",
    "print(\"It started at:\", datetime.datetime.now())\n",
    "\n",
    "best_classifier.fit(X_train, y_train)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "model_ran = int(end - start)\n",
    "\n",
    "print(\"Execution Time Was: \", model_ran, \"seconds\")\n",
    "\n",
    "y_pred_test = best_classifier.predict(X_test)\n",
    "y_pred_train = best_classifier.predict(X_train)\n",
    "\n",
    "y_pred_prob_test = best_classifier.predict_proba(X_test)\n",
    "y_pred_prob_train = best_classifier.predict_proba(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 871,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # ########## Different Threshold ##########\n",
    "\n",
    "# optimal_idx = np.argmax(tpr - fpr)\n",
    "# optimal_threshold = thresholds[optimal_idx]\n",
    "\n",
    "# y_pred_test = (y_pred_prob_test[:,1] >=optimal_threshold).astype(bool)\n",
    "# y_pred_train = (y_pred_prob_train[:,1] >=optimal_threshold).astype(bool)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 872,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Accuracy on Testing: 83.25 %\n",
      " AUC on Testing: 71.44 %\n",
      " Recall on Testing: 99.89 %\n",
      " Precision on Testing: 83.31 %\n",
      " Log-Loss on Testing: 0.41 \n",
      " ############################## \n",
      " Accuracy on Training: 83.28 %\n",
      " AUC on Training:  71.93 %\n",
      " Recall on Training: 99.9 %\n",
      " Precision on Training: 83.32 %\n",
      " Log-Loss on Training: 0.41 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "acc_test = round(100*accuracy_score(y_test, y_pred_test),2)\n",
    "acc_train = round(100*accuracy_score(y_train, y_pred_train),2)\n",
    "\n",
    "auc_test = round(100*roc_auc_score(y_test, y_pred_prob_test[:,1]),2)\n",
    "auc_train = round(100*roc_auc_score(y_train, y_pred_prob_train[:,1]),2)\n",
    "\n",
    "ll_test = round(log_loss(y_test, y_pred_prob_test),2)\n",
    "ll_train = round(log_loss(y_train, y_pred_prob_train),2)\n",
    "\n",
    "tn_test, fp_test, fn_test, tp_test = confusion_matrix(y_test, y_pred_test).ravel()\n",
    "tn_train, fp_train, fn_train, tp_train = confusion_matrix(y_train, y_pred_train).ravel()\n",
    "\n",
    "recall_test = round(100*tp_test/(tp_test+fn_test),2)\n",
    "precision_test = round(100*tp_test/(tp_test+fp_test),2)\n",
    "\n",
    "recall_train = round(100*tp_train/(tp_train+fn_train),2)\n",
    "precision_train = round(100*tp_train/(tp_train+fp_train),2) \n",
    "\n",
    "print(\n",
    "      \" Accuracy on Testing:\", acc_test, \"%\\n\", \n",
    "       \"AUC on Testing:\", auc_test, \"%\\n\",\n",
    "      \"Recall on Testing:\",recall_test, \"%\\n\",\n",
    "      \"Precision on Testing:\", precision_test, \"%\\n\",\n",
    "      \"Log-Loss on Testing:\", ll_test, \"\\n\",\n",
    "      \"##############################\", \"\\n\",\n",
    "      \"Accuracy on Training:\", acc_train, \"%\\n\",\n",
    "      \"AUC on Training: \", auc_train, \"%\\n\",\n",
    "      \"Recall on Training:\", recall_train, \"%\\n\",\n",
    "      \"Precision on Training:\", precision_train, \"%\\n\",\n",
    "       \"Log-Loss on Training:\", ll_train, \"\\n\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 873,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ROC Curve: Test\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob_test[:,1])\n",
    "\n",
    "plt.clf()\n",
    "plt.plot(fpr, tpr)\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC curve')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 874,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = skplt.metrics.plot_confusion_matrix(y_test, y_pred_test, normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 875,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True Positive: 73706 \n",
      "False Positive: 14766 \n",
      "True Negative: 78 \n",
      "False Negative: 82\n"
     ]
    }
   ],
   "source": [
    "tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test).ravel()\n",
    "print('True Positive:', tp,'\\nFalse Positive:', fp, '\\nTrue Negative:', \n",
    "      tn,'\\nFalse Negative:', fn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 876,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot = plot_importance(best_classifier, max_num_features=15)\n",
    "features_plot = pd.Series(best_classifier.feature_importances_, index=X_test.columns).nlargest(15).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 877,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = pd.DataFrame(data=y_test.values, index=y_test.index, columns=['actual'])\n",
    "results['probability'] = y_pred_prob_test[:,1]\n",
    "results = results.sort_values('probability', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 878,
   "metadata": {},
   "outputs": [],
   "source": [
    "results['count'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 881,
   "metadata": {},
   "outputs": [],
   "source": [
    "results['total'] = results['count'].cumsum()\n",
    "results['will_call'] = results['total'] - results['actual'].cumsum()\n",
    "\n",
    "results = results.drop('count',1) \n",
    "\n",
    "results['percent_will_call'] = 100*results['will_call']/results['total']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 900,
   "metadata": {},
   "outputs": [],
   "source": [
    "#results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 883,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f86ab952c50>"
      ]
     },
     "execution_count": 883,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_top = results.head(88632)\n",
    "\n",
    "start = 500\n",
    "end = 100000 #50500\n",
    "step = 500\n",
    "\n",
    "thresholds = list(range (start, end, step))\n",
    "results_thresholds = results.loc[results['total'].isin(thresholds) == True,]\n",
    "\n",
    "to_plot = results_top\n",
    "\n",
    "to_plot.plot(x ='total', y='percent_will_call', kind = 'scatter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 901,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ax1 = to_plot.plot.scatter(x='total',y='percent_will_call', c='DarkBlue')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 902,
   "metadata": {},
   "outputs": [],
   "source": [
    "#results.loc[results['total']==results.shape[0],]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_test.groupby([response]).count()['PRIMARY_CUST_IND']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "100*data_test.groupby([response]).count()['PRIMARY_CUST_IND'][0]/(data_test.groupby([response]).count()['PRIMARY_CUST_IND'][0]+data_test.groupby([response]).count()['PRIMARY_CUST_IND'][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.groupby([response]).count()['PRIMARY_CUST_IND']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "creator": "vcherno",
  "kernelspec": {
   "display_name": "Python (env Python3)",
   "language": "python",
   "name": "py-dku-venv-python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "tags": []
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
